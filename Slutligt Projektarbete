//Hanna Graw, Freja Jakobsson, Martin Lagus. 2021-10-25. VS 2019.

using System;

namespace Projektarbete
{
    class Program
    {
        static void Main(string[] args)
        {
            Välkommen();

            bakgrundsfärger();

            start();
        }

        /// <summary>
        /// Här finns själva spelet exklusive val av färger.
        /// </summary>
        static void start()
        {
            string[] spelarID = VäljAntalSpelare();

            int spelare1Vinster = 0;
            int spelare2Vinster = 0;

            int[] spelStatistikStart = new int[2];
            spelStatistikStart[0] = spelare1Vinster;
            spelStatistikStart[1] = spelare2Vinster;

            Spel(spelarID, spelStatistikStart);
        }

        /// <summary>
        /// Metod för att välja mellan olika bakgrundsfärger till konsolen.
        /// </summary>
        static void bakgrundsfärger()
        {
            Console.WriteLine("Gör spelplanen roligare! Välj bakgrunds samt textfärg nedan: ");
            Console.WriteLine("Bakgrundsfärg: \n 0 = Svart \n 1 = Blå \n 2 = Röd \n 3 = Grön \n 4 = Vit \n 5 = Cyan \n 6 = Magenta \n 7 = Grå \n 8 = Gul");
            string bakgrund = Console.ReadLine();

            switch (bakgrund)
            {
                case "0":
                    Console.BackgroundColor = ConsoleColor.Black;
                    Textfärger(bakgrund);
                    break;
                case "1":
                    Console.BackgroundColor = ConsoleColor.Blue;
                    Textfärger(bakgrund);
                    break;
                case "2":
                    Console.BackgroundColor = ConsoleColor.Red;
                    Textfärger(bakgrund);
                    break;
                case "3":
                    Console.BackgroundColor = ConsoleColor.Green;
                    Console.ForegroundColor = ConsoleColor.Black;
                    Textfärger(bakgrund);
                    break;
                case "4":
                    Console.BackgroundColor = ConsoleColor.White;
                    Console.ForegroundColor = ConsoleColor.Black;
                    Textfärger(bakgrund);
                    break;
                case "5":
                    Console.BackgroundColor = ConsoleColor.Cyan;
                    Console.ForegroundColor = ConsoleColor.Black;
                    Textfärger(bakgrund);
                    break;
                case "6":
                    Console.BackgroundColor = ConsoleColor.Magenta;
                    Textfärger(bakgrund);
                    break;
                case "7":
                    Console.BackgroundColor = ConsoleColor.Gray;
                    Console.ForegroundColor = ConsoleColor.Black;
                    Textfärger(bakgrund);
                    break;
                case "8":
                    Console.BackgroundColor = ConsoleColor.Yellow;
                    Console.ForegroundColor = ConsoleColor.Black;
                    Textfärger(bakgrund);
                    break;
                default:
                    Console.WriteLine("Felaktig input, skriv in en siffra mellan 0-8. ");
                    bakgrundsfärger();
                    break;

            }
        }

        /// <summary>
        /// Metod för att välja mellan olika textfärger.
        /// </summary>
        /// <param name="bakgrund"></param>
        static void Textfärger(string bakgrund)
        {
            Console.WriteLine("Textfärg: \n 0 = Svart \n 1 = Blå \n 2 = Röd \n 3 = Grön \n 4 = Vit \n 5 = Cyan \n 6 = Magenta \n 7 = Grå \n 8 = Gul");
            string textfärg = Console.ReadLine();
            if (bakgrund != textfärg)
            {
                switch (textfärg)
                {
                    case "0":
                        Console.ForegroundColor = ConsoleColor.Black;

                        break;
                    case "1":
                        Console.ForegroundColor = ConsoleColor.Blue;

                        break;
                    case "2":
                        Console.ForegroundColor = ConsoleColor.Red;

                        break;
                    case "3":
                        Console.ForegroundColor = ConsoleColor.Green;

                        break;
                    case "4":
                        Console.ForegroundColor = ConsoleColor.White;

                        break;
                    case "5":
                        Console.ForegroundColor = ConsoleColor.Cyan;

                        break;
                    case "6":
                        Console.ForegroundColor = ConsoleColor.Magenta;

                        break;
                    case "7":
                        Console.ForegroundColor = ConsoleColor.Gray;

                        break;
                    case "8":
                        Console.ForegroundColor = ConsoleColor.Yellow;

                        break;
                    default:
                        Console.WriteLine("Felaktig input, skriv in en siffra mellan 0-8. ");
                        Textfärger(bakgrund);
                        break;
                }
            }
            else
            {
                Console.WriteLine("\nBakgrundsfärg och Textfärg kan ej vara samma, försök igen. ");
                Textfärger(bakgrund);
            }
            Clear();

        }

        /// <summary>
        /// Metod som hälsar spelarna välkomna och skriver ut spelreglerna.
        /// </summary>
        static void Välkommen()
        {
            Console.WriteLine("Hej och välommen till Nim-spelet! Reglerna lyder som följande: ");
            Console.WriteLine("I början av spelet finns det tre högar med pinnar, det är 5 pinnar i respektive hög. Målet med spelet är att ta den sista pinnen.");
            Console.WriteLine("Detta är ett tur-baserat spel, man kan endast ta pinnar från en hög per tur/omgång, man får dock ta upp hur många pinnar man vill per hög.");
            Console.WriteLine(" ");
        }

        /// <summary>
        /// Metod för att välja om man är två spelare eller vill spela mot datorn. Det är även här man skriver sitt namn.
        /// </summary>
        /// <returns></returns>
        static string[] VäljAntalSpelare()
        {
            string antalSpelare;

            Console.WriteLine("Välj antal spelare, 1 eller 2.");
            antalSpelare = Console.ReadLine();

            if (antalSpelare == "1")
            {
                Console.WriteLine("Skriv in ditt namn här:");
                string[] ensamSpelare = new string[2];
                ensamSpelare[1] = Console.ReadLine();
                if (ensamSpelare[1] == "")
                {
                    Console.WriteLine("Du måste ha ett namn!");
                    return VäljAntalSpelare();
                }
                ensamSpelare[0] = "";

                return ensamSpelare;
            }

            else if (antalSpelare == "2")
            {
                string[] tvåSpelare = new string[2];
                Console.WriteLine("Skriv in namnet på spelare 1 här:");
                tvåSpelare[0] = Console.ReadLine();
                Console.WriteLine("Skriv in namnet på spelare 2 här:");
                tvåSpelare[1] = Console.ReadLine();

                if (tvåSpelare[0] == "" || tvåSpelare[1] == "")
                {
                    Console.WriteLine("Du måste ha ett namn!");
                    return VäljAntalSpelare();
                }

                return tvåSpelare;
            }


            else
            {
                Console.WriteLine("Något gick snett. Försök igen!");

                return VäljAntalSpelare();
            }

        }

        /// <summary>
        /// Detta är en metod för spelets grunduppbyggnad som definierar hur många stickor som finns från början och håller reda på om det är en jämn eller ojämn tur (spelare 1 eller 2).
        /// Den avgör även om det är en eller två spelare och då vilka metoder man går vidare till.
        /// </summary>
        /// <param name="spelarID"></param>
        /// <param name="spelStatistik"></param>
        static void Spel(string[] spelarID, int[] spelStatistik)
        {
            int[] aktuellStickArray = { 5, 5, 5 };

            SkrivUtHögar(aktuellStickArray);

            int turnCount = 1;

            while (ÄrHögarnaTomma(aktuellStickArray) == false)
            {
                if (turnCount % 2 != 0)
                {
                    turn(turnCount, spelarID[0], spelarID[1]);

                    if (spelarID[0] == "")
                    {
                        aktuellStickArray = SkrivUtHögar(Drag(AIDrag(aktuellStickArray), aktuellStickArray));
                    }

                    else
                    {
                        aktuellStickArray = SkrivUtHögar(Drag(SpelarDrag(), aktuellStickArray));
                    }

                    turnCount++;
                }

                else
                {
                    turn(turnCount, spelarID[0], spelarID[1]);

                    aktuellStickArray = SkrivUtHögar(Drag(SpelarDrag(), aktuellStickArray));

                    turnCount++;
                }
            }

            Vinnare(turnCount, spelarID[0], spelarID[1]);

            villdufortsättaspela(spelarID, vinststatistik(turnCount, spelStatistik[0], spelStatistik[1]), turnCount);
        }

        /// <summary>
        /// Metod som skriver ut högarna.
        /// </summary>
        /// <param name="aktuellStickArray"></param>
        /// <returns></returns>
        static int[] SkrivUtHögar(int[] aktuellStickArray)
        {
            Console.WriteLine("");

            int x = 0;
            int y = 0;
            int z = 0;
            while (x < aktuellStickArray[0])
            {
                Console.Write("| ");
                x++;
            }

            if (0 == aktuellStickArray[0])
            {
                Console.Write("Hög 1 tom");
            }

            Console.WriteLine("");

            while (y < aktuellStickArray[1])
            {
                Console.Write("| ");
                y++;
            }

            if (0 == aktuellStickArray[1])
            {
                Console.Write("Hög 2 tom");
            }

            Console.WriteLine("");

            while (z < aktuellStickArray[2])
            {
                Console.Write("| ");
                z++;
            }

            if (0 == aktuellStickArray[2])
            {
                Console.Write("Hög 3 tom");
            }

            Console.WriteLine("");
            Console.WriteLine("");

            return aktuellStickArray;
        }

        /// <summary>
        /// Metod som uppdaterar innehållet i högarna beroende på det drag som utförts av spelaren eller datorn.
        /// </summary>
        /// <param name="drag"></param>
        /// <param name="aktuellStickArray"></param>
        /// <returns></returns>
        static int[] Drag(int[] drag, int[] aktuellStickArray)
        {
            if (drag[0] == 1 && drag[1] > 0 && drag[1] <= aktuellStickArray[0])
            {
                aktuellStickArray[0] -= drag[1];
                return aktuellStickArray;
            }

            else if (drag[0] == 2 && drag[1] > 0 && drag[1] <= aktuellStickArray[1])
            {
                aktuellStickArray[1] -= drag[1];
                return aktuellStickArray;
            }

            else if (drag[0] == 3 && drag[1] > 0 && drag[1] <= aktuellStickArray[2])
            {
                aktuellStickArray[2] -= drag[1];
                return aktuellStickArray;
            }

            else
            {
                Console.WriteLine("Något gick fel! Försök igen.");
                return Drag(SpelarDrag(), aktuellStickArray);
            }
        }

        /// <summary>
        /// Denna metod anropas då det är en mänsklig spelare som ska utföra ett drag.
        /// </summary>
        /// <returns></returns>
        static int[] SpelarDrag()
        {
            Console.Write("Skriv först en hög att plocka stickor följt av mellanslag och antal stickor du vill plocka: ");

            try
            {
                string högAntal = Console.ReadLine();
                string[] arrHögAntal = högAntal.Split(' ');

                int[] väljHögOchStickor = new int[2];

                int.TryParse(arrHögAntal[0], out väljHögOchStickor[0]);
                int.TryParse(arrHögAntal[1], out väljHögOchStickor[1]);

                return väljHögOchStickor;
            }

            catch
            {
                Console.WriteLine("Något gick snett. Försök igen!");
                return SpelarDrag();
            }
        }

        /// <summary>
        /// Denna metod anropas då det är datorn som ska utföra ett drag.
        /// Random används för att välja hög och antal stickor förutom då endast en hög återstår, i vilket fall datorn kommer att välja att ta alla stickor i den högen.
        /// </summary>
        /// <param name="arr"></param>
        /// <returns></returns>
        static int[] AIDrag(int[] arr)
        {
            int[] väljHögOchStickor = new int[2];

            if (arr[0] == 0 && arr[1] == 0)
            {
                väljHögOchStickor[0] = 3;
                väljHögOchStickor[1] = arr[2];
                return väljHögOchStickor;
            }

            else if (arr[0] == 0 && arr[2] == 0)
            {
                väljHögOchStickor[0] = 2;
                väljHögOchStickor[1] = arr[1];
                return väljHögOchStickor;
            }

            else if (arr[1] == 0 && arr[2] == 0)
            {
                väljHögOchStickor[0] = 1;
                väljHögOchStickor[1] = arr[0];
                return väljHögOchStickor;
            }

            else
            {

                Random random = new Random();

                int väljhög = random.Next(1, 4);

                if (arr[väljhög - 1] != 0)
                {
                    väljHögOchStickor[0] = väljhög;

                    int antalstickor;

                    if (väljhög == 1)
                    {
                        antalstickor = random.Next(1, arr[0] + 1);
                        väljHögOchStickor[1] = antalstickor;
                    }

                    else if (väljhög == 2)
                    {
                        antalstickor = random.Next(1, arr[1] + 1);
                        väljHögOchStickor[1] = antalstickor;
                    }

                    else if (väljhög == 3)
                    {
                        antalstickor = random.Next(1, arr[2] + 1);
                        väljHögOchStickor[1] = antalstickor;
                    }

                    return väljHögOchStickor;
                }

                else
                {
                    return AIDrag(arr);
                }
            }

        }

        /// <summary>
        /// Metod som kontrollerar om alla högar är tomma.
        /// </summary>
        /// <param name="arr"></param>
        /// <returns></returns>
        static bool ÄrHögarnaTomma(int[] arr)
        {
            if (arr[0] == 0 && arr[1] == 0 && arr[2] == 0)
            {
                return true;
            }

            else
            {
                return false;
            }
        }

        /// <summary>
        /// Metod som skriver ut vilken spelare som ska utföra nästa drag.
        /// </summary>
        /// <param name="count"></param>
        /// <param name="spelare1"></param>
        /// <param name="spelare2"></param>
        static void turn(int count, string spelare1, string spelare2)
        {
            if (count % 2 == 0)
            {
                Console.WriteLine($"{spelare2} gör ditt drag!");
            }

            else if (spelare1 == "")
            {
                Console.WriteLine("Motståndarens drag!");
            }

            else
            {
                Console.WriteLine($"{spelare1} gör ditt drag!");
            }
        }

        /// <summary>
        /// Metod som avgör och skriver ut vinnaren.
        /// </summary>
        /// <param name="count"></param>
        /// <param name="spelare1"></param>
        /// <param name="spelare2"></param>
        static void Vinnare(int count, string spelare1, string spelare2)
        {
            Console.WriteLine("Tack för att du spelat Nim!");

            if (count % 2 == 1)
            {
                Console.WriteLine($"{spelare2} är vinnaren!");
            }

            else if (spelare1 == "")
            {
                Console.WriteLine("Tyvärr förlorade du denna omgång. Bättre lycka nästa gång!");
            }

            else
            {
                Console.WriteLine($"{spelare1} är vinnaren!");
            }

        }

        /// <summary>
        /// Metod som håller reda på och skriver ut vinststatistiken. Vinsterna från tidigare omgångar förs in i metoden så att man kan spela flera omgångar och se vem som vunnit flest gånger.
        /// </summary>
        /// <param name="count"></param>
        /// <param name="spelare1Vinster"></param>
        /// <param name="spelare2Vinster"></param>
        /// <returns></returns>
        static int[] vinststatistik(int count, int spelare1Vinster, int spelare2Vinster)
        {
            if (count == 0)
            {

            }

            else if (count % 2 == 0)
            {
                spelare1Vinster++;
            }

            else
            {
                spelare2Vinster++;
            }

            int[] vinststatistik = new int[2];
            vinststatistik[0] = spelare1Vinster;
            vinststatistik[1] = spelare2Vinster;
            Console.WriteLine(string.Join(" – ", vinststatistik));
            return vinststatistik;
        }

        /// <summary>
        /// Metod som frågar om man vill fortsätta spela och om man är samma spelare. Beroende på vad man svarar skickas man till andra metoder.
        /// Om man inte är samma spelare kommer vinststatistiken nollställas och man får återigen välja antal spelare.
        /// </summary>
        /// <param name="spelarID"></param>
        /// <param name="spelStatistik"></param>
        /// <param name="turnCount"></param>
        static void villdufortsättaspela(string[] spelarID, int[] spelStatistik, int turnCount)
        {
            Console.WriteLine("Vill du forsätta att spela, skriv ja eller nej");
            string svar1 = Console.ReadLine();
            string svar = svar1.ToUpper();

            if (svar == "JA")
            {
                Console.WriteLine("Vad kul att du vill fortsätta spela!");


                Console.WriteLine("Är det samma spelare? Skriv ja eller nej!");
                string SVAR1 = Console.ReadLine();
                string SVAR = SVAR1.ToUpper();

                if (SVAR == "JA")
                {
                    Clear();
                    Spel(spelarID, vinststatistik(0, spelStatistik[0], spelStatistik[1]));

                }

                else if (SVAR == "NEJ")
                {
                    Clear();
                    start();
                }

                else
                {
                    Console.WriteLine("Du har skrivit in fel input, försök igen!");
                    villdufortsättaspela(spelarID, spelStatistik, turnCount);
                }
            }

            else if (svar == "NEJ")
            {
                Console.WriteLine("Vad tråkigt att du inte vill forsätta att spela, kom tillbka och spela snart igen!");
                Console.WriteLine("");
            }

            else
            {
                Console.WriteLine("Du har skrivit in fel input, försök igen!");
                villdufortsättaspela(spelarID, spelStatistik, turnCount);
            }
        }

        /// <summary>
        /// Metod som rensar konsolen.
        /// </summary>
        static void Clear()
        {
            Console.Clear();
        }
    }
}
